// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Euc_dist
double Euc_dist(std::vector<double> A, std::vector<double> B);
RcppExport SEXP _convexhull_Euc_dist(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type A(ASEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(Euc_dist(A, B));
    return rcpp_result_gen;
END_RCPP
}
// find_left
std::vector<double> find_left(std::vector<std::vector<double> > points);
RcppExport SEXP _convexhull_find_left(SEXP pointsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double> > >::type points(pointsSEXP);
    rcpp_result_gen = Rcpp::wrap(find_left(points));
    return rcpp_result_gen;
END_RCPP
}
// jarvis_march_cpp
std::vector<std::vector<double> > jarvis_march_cpp(std::vector<std::vector<double> > input);
RcppExport SEXP _convexhull_jarvis_march_cpp(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double> > >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(jarvis_march_cpp(input));
    return rcpp_result_gen;
END_RCPP
}
// remove_duplicates
std::vector<std::vector<double> > remove_duplicates(std::vector<std::vector<double> > input);
RcppExport SEXP _convexhull_remove_duplicates(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::vector<double> > >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(remove_duplicates(input));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_convexhull_Euc_dist", (DL_FUNC) &_convexhull_Euc_dist, 2},
    {"_convexhull_find_left", (DL_FUNC) &_convexhull_find_left, 1},
    {"_convexhull_jarvis_march_cpp", (DL_FUNC) &_convexhull_jarvis_march_cpp, 1},
    {"_convexhull_remove_duplicates", (DL_FUNC) &_convexhull_remove_duplicates, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_convexhull(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
